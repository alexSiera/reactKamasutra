{"version":3,"sources":["components/Profile/ProfileInfo/ProfileData/ProfileData.module.scss","components/Profile/ProfileInfo/ProfileInfo.module.scss","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.module.scss","components/Profile/MyPosts/MyPosts.module.scss","components/Profile/MyPosts/Post/Post.module.scss","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileData/ProfileData.jsx","components/Profile/ProfileInfo/ProfileData/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPostsForm/MyPostsForm.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","Redux/selectors/profileSelectors.js","components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatus","props","useState","editMode","setEditMode","status","statusInput","setStatus","useEffect","toggleEditMode","isOwner","updateUserStatus","className","s","profileStatusBlock","onDoubleClick","profileInfoInput","autoFocus","onChange","e","target","value","onBlur","ContactsData","contactTitle","contactValue","contactsData","ProfileData","profileData","goToEditMode","descriptionBlock","onClick","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","Object","keys","contacts","map","c","key","reduxForm","form","handleSubmit","error","console","log","profileDataForm","onSubmit","formDataItems","formDataItemsInput","createField","Input","type","Textarea","contact","formSubmitBtn","style","formSummaryError","ProfileInfo","savePhoto","saveProfileData","Preloader","onMainPhotoSelected","event","files","file","profileAvatar","src","photos","large","avatar","imgMain","alt","photosInputContainer","photosInput","accept","htmlFor","initialValues","profileFormData","then","catch","Post","message","name","item","maxLength10","maxLengthCreator","Field","component","placeholder","validate","required","MyPosts","React","memo","posts","addPost","postsElements","p","id","likesCount","postsBlock","postsBlockText","formData","textbox","connect","state","profilePage","actions","addPostAC","Profile","MyPostsContainer","getProfileData","getStatus","getProfileUpdateStatus","profileUpdateStatusSuccess","compose","auth","autorizedUid","getUserId","isAuth","getIsAuth","getUserProfile","getUserProfileThunkCreator","getUserStatus","getUserStatusThunkCreator","updateStatusThunkCreator","savePhotoThunkCreator","saveProfileDataThunkCreator","withRouter","userId","parseInt","match","params","history","push","refreshProfile"],"mappings":"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","file":"static/js/3.4a3e94ce.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileData_descriptionBlock__3yskL\",\"imgMain\":\"ProfileData_imgMain__1MR6q\",\"profileInfoInput\":\"ProfileData_profileInfoInput__2rINX\",\"aboutMe\":\"ProfileData_aboutMe__13OZj\",\"contactsLists\":\"ProfileData_contactsLists__3tXCf\",\"contactsHeading\":\"ProfileData_contactsHeading__3roC_\",\"contactsData\":\"ProfileData_contactsData__2NQVb\",\"formSubmitBtn\":\"ProfileData_formSubmitBtn__2-c6l\",\"profileDataForm\":\"ProfileData_profileDataForm__2Q3iv\",\"formDataItems\":\"ProfileData_formDataItems__1HgwS\",\"formDataItemsInput\":\"ProfileData_formDataItemsInput__XmnVs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__gOOQY\",\"imgMain\":\"ProfileInfo_imgMain__19Z2q\",\"profileInfoInput\":\"ProfileInfo_profileInfoInput__3YmSw\",\"aboutMe\":\"ProfileInfo_aboutMe__1JWq9\",\"profileAvatar\":\"ProfileInfo_profileAvatar__3f9ob\",\"photosInputContainer\":\"ProfileInfo_photosInputContainer__39sJ5\",\"photosInput\":\"ProfileInfo_photosInput__2YQVh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileStatus_descriptionBlock__1debn\",\"profileStatusBlock\":\"ProfileStatus_profileStatusBlock__35DzV\",\"imgMain\":\"ProfileStatus_imgMain__31jQr\",\"profileInfoInput\":\"ProfileStatus_profileInfoInput__3_b7c\",\"aboutMe\":\"ProfileStatus_aboutMe__3jBhs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1cAL4\",\"postsBlockText\":\"MyPosts_postsBlockText__3e_AC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2yzXq\"};","import React, { useState, useEffect } from 'react';\nimport s from './ProfileStatus.module.scss';\ntype PropsType = {\n    isOwner: boolean;\n    status: string;\n    updateUserStatus: (newStatus: string) => void;\n};\ntype StateType = {\n    editMode: boolean;\n    statusInput: string;\n};\nconst ProfileStatus: React.FC<PropsType> = (props: PropsType) => {\n    const [editMode, setEditMode] = useState<boolean>(false);\n    const [statusInput, setStatus] = useState<string>(props.status);\n    useEffect(() => {\n        setStatus(props.status);\n    }, [props.status]);\n    const toggleEditMode = (): void => {\n        if (!props.isOwner) return;\n        if (!editMode) {\n            setEditMode(true);\n        } else {\n            setEditMode(false);\n            props.updateUserStatus(statusInput);\n        }\n    };\n    const updateLocalStatus = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        setStatus(e.target.value);\n    };\n    return (\n        <div className={s.profileStatusBlock}>\n            {!editMode && (\n                <div>\n                    <span onDoubleClick={toggleEditMode}>\n                        <b>Status:</b> {props.status}\n                    </span>\n                </div>\n            )}\n            {editMode && (\n                <div className={s.profileInfoInput}>\n                    <input autoFocus onChange={updateLocalStatus} onBlur={toggleEditMode} value={statusInput} />\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default ProfileStatus;\n","import React from 'react';\nimport s from './ProfileData.module.scss';\n\nconst ProfileData = ({profileData, isOwner, goToEditMode}) => {\n    return (\n        <div className={s.descriptionBlock}>\n            <h2>Profile Info</h2>\n            {isOwner && <div>\n                <button onClick={goToEditMode}>Edit information</button>\n            </div>}\n\n            <div>\n                <div>\n                    <b>Full name:</b> {profileData.fullName ? profileData.fullName : \"No info\"}\n                </div>\n                <div className={s.aboutMe}>\n                    <b>About me:</b> {profileData.aboutMe ? profileData.aboutMe : \"No info\"}\n                </div>\n                {profileData.lookingForAJob &&\n                <div className={s.aboutMe}>\n                    <div className={s.aboutMe}>\n                        <b>Job status:</b> Yes I'am looking for a job.\n                    </div>\n                    <b>My professional skills:</b>\n                    {\n                        profileData.lookingForAJobDescription ? profileData.lookingForAJobDescription : \"No one\"\n                    }\n                </div>\n                }\n                {!profileData.lookingForAJob &&\n                <div className={s.aboutMe}>\n                    <b>Job status:</b> I'am not looking for a job right now.\n                </div>\n                }\n                <div>\n                    <b>Contacts: {Object.keys(profileData.contacts)\n                        .map((c => {\n                            return <ContactsData key={c} contactTitle={c} contactValue={profileData.contacts[c]}/>\n                        }))}\n                    </b>\n                </div>\n            </div>\n\n        </div>\n    )\n};\nconst ContactsData = ({contactTitle, contactValue}) => {\n    return (\n        <div className={s.contactsData}><b>{contactTitle}</b>: {contactValue}</div>\n    )\n};\nexport default ProfileData;","import React from 'react';\nimport s from './ProfileData.module.scss';\nimport { createField, Input, Textarea } from '../../../Common/FormsControls/FormsControls';\nimport { reduxForm } from 'redux-form';\nimport style from '../../../Common/FormsControls/FormControls.module.scss';\n\nconst ProfileDataForm = ({ handleSubmit, error, profileData }) => {\n    console.log(error);\n    return (\n        <form className={s.profileDataForm} onSubmit={handleSubmit}>\n            {error}\n            <h4>Profile Data Form</h4>\n\n            <div className={s.formDataItems}>\n                <label>\n                    <b>Full name:</b>{' '}\n                </label>\n                <div className={s.formDataItemsInput}>\n                    {createField('Enter full name', 'fullName', [], Input, { type: 'text' })}\n                </div>\n            </div>\n            <div className={s.formDataItems}>\n                <label>\n                    <b>About me:</b>{' '}\n                </label>\n                <div className={s.formDataItemsInput}>\n                    {createField('Enter about me info', 'aboutMe', [], Input, { type: 'text' })}\n                </div>\n            </div>\n            <div className={s.formDataItems}>\n                <label>\n                    <b>Skills:</b>{' '}\n                </label>\n                <div className={s.formDataItemsInput}>\n                    {createField('Enter you skills', 'lookingForAJobDescription', [], Textarea, { type: 'text' })}\n                </div>\n            </div>\n            <div className={s.formDataItems}>\n                <label>\n                    <b>Are you looking for a job ?</b>{' '}\n                </label>\n                <div className={s.formDataItemsInput}>\n                    {createField('Enter job status', 'lookingForAJob', [], Input, { type: 'checkbox' })}\n                </div>\n            </div>\n            <div>\n                <b>\n                    Contacts:{' '}\n                    {Object.keys(profileData.contacts).map((key) => {\n                        return (\n                            <div key={key} className={s.contact}>\n                                <b>{key}:</b> <span>{createField(key, `contacts[${key}]`, [], Input)}</span>\n                            </div>\n                        );\n                    })}\n                </b>\n            </div>\n            <div className={s.formSubmitBtn}>\n                <button>Save profile data</button>\n            </div>\n            <div>{error && <div className={style.formSummaryError}>{error}</div>}</div>\n        </form>\n    );\n};\nexport default reduxForm({\n    form: 'edit-profile',\n})(ProfileDataForm);\n","import React, { ChangeEvent, useState } from 'react';\nimport s from './ProfileInfo.module.scss';\nimport Preloader from '../../Common/Preloader/Preloader';\nimport ProfileStatus from './ProfileStatus/ProfileStatus';\nimport ProfileData from './ProfileData/ProfileData';\nimport ProfileDataForm from './ProfileData/ProfileDataForm';\nimport avatar from '../../../assets/images/maleAvatar.jpg';\nimport { ProfileType } from '../../../types/types';\ntype PropsType = {\n    profileData: ProfileType;\n    updateUserStatus: (newStatus: string) => Promise<any>;\n    status: string;\n    isOwner: boolean;\n    savePhoto: (file: File) => void;\n    saveProfileData: (profileData: ProfileType) => any;\n};\nconst ProfileInfo: React.FC<PropsType> = ({\n    profileData,\n    updateUserStatus,\n    status,\n    isOwner,\n    savePhoto,\n    saveProfileData,\n}) => {\n    const [editMode, setEditMode] = useState(false);\n    if (!profileData) return <Preloader />;\n\n    const onMainPhotoSelected = (event: ChangeEvent<HTMLInputElement>): void => {\n        if (event.target) {\n            if (event.target.files) {\n                const file: File = event.target.files[0];\n                savePhoto(file);\n            }\n        }\n    };\n    const onProfileDataFormSubmit = (profileFormData: any): void => {\n        saveProfileData(profileFormData)\n            .then(() => {\n                setEditMode(false);\n            })\n            .catch((e: Error) => console.log(e));\n    };\n    return (\n        <div>\n            <div className={s.profileAvatar}>\n                <img\n                    src={profileData.photos.large ? profileData.photos.large : avatar}\n                    className={s.imgMain}\n                    alt=\"photo\"\n                />\n                {isOwner && (\n                    <span className={s.photosInputContainer}>\n                        <input className={s.photosInput} type=\"file\" onChange={onMainPhotoSelected} accept=\"image/*\" />\n                        <label htmlFor=\"file\">Update photo</label>\n                    </span>\n                )}\n            </div>\n            {editMode && (\n                <ProfileDataForm\n                    initialValues={profileData}\n                    onSubmit={onProfileDataFormSubmit}\n                    savePhoto={onMainPhotoSelected}\n                    profileData={profileData}\n                />\n            )}\n            {!editMode && (\n                <ProfileData profileData={profileData} isOwner={isOwner} goToEditMode={(): void => setEditMode(true)} />\n            )}\n\n            <ProfileStatus isOwner={isOwner} status={status} updateUserStatus={updateUserStatus} />\n        </div>\n    );\n};\nexport default ProfileInfo;\n","import React from \"react\";\nimport s from \"./Post.module.scss\";\nconst Post = ({message,name}) => {\n  return (\n        <div className={s.item}>\n          <img src=\"https://f0.pngfuel.com/png/439/19/avatar-user-profile-icon-women-wear-frock-png-clip-art.png\" />\n          {name} - {message}\n          <div>\n            <span> like</span>\n            <span> dislike</span>\n          </div>\n        </div>\n  );\n};\nexport default Post;\n","import React from 'react';\nimport { Field, reduxForm } from 'redux-form'\nimport {maxLengthCreator, required} from \"../../../../utils/validators/valiadators\";\nimport {Textarea} from \"../../../Common/FormsControls/FormsControls\";\nconst maxLength10 = maxLengthCreator(10);\nconst MyPostsForm = ({handleSubmit}) => {\n    return (\n        <form onSubmit={handleSubmit}>\n            <Field component={Textarea} placeholder=\"Please Enter New Post\" name=\"textbox\" validate={[required, maxLength10]}/>\n            <div>\n                <button>Send Post</button>\n            </div>\n        </form>\n        )\n};\nexport default reduxForm({\n    form: 'mypost'\n})(MyPostsForm);","import React from 'react';\nimport s from './MyPosts.module.scss';\nimport Post from './Post/Post';\nimport MyPostsForm from \"./MyPostsForm/MyPostsForm\";\nconst MyPosts = React.memo(({posts,addPost }) => {\n    const postsElements = posts.map((p => <Post key={p.id} message={p.message} likesCount={p.likesCount} />));\n    const onAddPost = (formData) => {\n        addPost(formData.textbox);\n    };\n\n    return (\n        <div className={s.postsBlock}>\n            <h3>My post</h3>\n            <div className={s.postsBlockText}>\n                <MyPostsForm onSubmit={onAddPost} />\n            </div>\n            <div className={s.posts}>\n                {postsElements}\n            </div>\n        </div>\n    )\n});\nexport default MyPosts;","import { actions } from '../../../Redux/reducers/profileReducer';\nimport MyPosts from './MyPosts';\nimport { connect } from 'react-redux';\nimport { AppStateType } from '../../../Redux/reduxStore';\n\nconst mapStateToProps = (state: AppStateType): typeof state.profilePage => state.profilePage;\n\nexport default connect(mapStateToProps, {\n    addPost: actions.addPostAC,\n})(MyPosts);\n","import React from 'react';\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\nimport { ProfileType } from '../../types/types';\ntype PropsType = {\n    saveProfileData: () => void;\n    savePhoto: () => void;\n    isOwner: boolean;\n    profileData: ProfileType;\n    updateUserStatus: (newStatus: string) => Promise<any>;\n    status: string;\n};\nconst Profile: React.FC<PropsType> = (props) => {\n    return (\n        <div>\n            <ProfileInfo\n                saveProfileData={props.saveProfileData}\n                savePhoto={props.savePhoto}\n                isOwner={props.isOwner}\n                profileData={props.profileData}\n                updateUserStatus={props.updateUserStatus}\n                status={props.status}\n            />\n            <MyPostsContainer />\n        </div>\n    );\n};\nexport default Profile;\n","export const getProfileData = (profilePage) => {\n    return profilePage.profileData;\n};\nexport const getStatus = (profilePage) => {\n    return profilePage.status;\n};\nexport const getProfileUpdateStatus= (profilePage) => {\n    return profilePage.profileUpdateStatusSuccess;\n}","import React, { useEffect } from 'react';\nimport Profile from './Profile';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport {\n    getUserProfileThunkCreator,\n    getUserStatusThunkCreator,\n    savePhotoThunkCreator,\n    saveProfileDataThunkCreator,\n    updateStatusThunkCreator,\n} from '../../Redux/reducers/profileReducer';\nimport { compose } from 'redux';\nimport { getProfileData, getProfileUpdateStatus, getStatus } from '../../Redux/selectors/profileSelectors';\nimport { getIsAuth, getUserId } from '../../Redux/selectors/authSelectors';\n\nconst ProfileContainer = (props) => {\n    const refreshProfile = () => {\n        let userId = parseInt(props.match.params.userId);\n        if (!userId) {\n            userId = props.autorizedUid;\n            if (!userId) {\n                props.history.push('/login');\n            }\n        }\n        props.getUserProfile(userId);\n        props.getUserStatus(userId);\n    };\n    useEffect(() => {\n        refreshProfile();\n    }, [props.match.params.userId]);\n    return <Profile {...props} isOwner={!props.match.params.userId} />;\n};\nconst mapStateToProps = ({ profilePage, auth }) => {\n    return {\n        profileData: getProfileData(profilePage),\n        status: getStatus(profilePage),\n        profileUpdateStatusSuccess: getProfileUpdateStatus(profilePage),\n        autorizedUid: getUserId(auth),\n        isAuth: getIsAuth(auth),\n    };\n};\nexport default compose(\n    connect(mapStateToProps, {\n        getUserProfile: getUserProfileThunkCreator,\n        getUserStatus: getUserStatusThunkCreator,\n        updateUserStatus: updateStatusThunkCreator,\n        savePhoto: savePhotoThunkCreator,\n        saveProfileData: saveProfileDataThunkCreator,\n    }),\n    withRouter,\n)(ProfileContainer);\n"],"sourceRoot":""}